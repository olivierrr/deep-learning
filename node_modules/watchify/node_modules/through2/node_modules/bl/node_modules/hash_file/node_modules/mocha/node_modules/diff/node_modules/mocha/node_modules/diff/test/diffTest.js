const VERBOSE = false;

var assert = require('assert'),
    diff = require('../diff');

function log() {
  VERBOSE && console.log.apply(console, arguments);
}

exports['Whitespace diff'] = function() {
    diffResult = diff.diffWords("New Value", "New  ValueMoreData");
    assert.equal(
        "New  <ins>ValueMoreData</ins><del>Value</del>",
        diff.convertChangesToXML(diffResult),
        "Single whitespace diffResult Value");

    diffResult = diff.diffWords("New Value  ", "New  ValueMoreData ");
    assert.equal(
        "New  <ins>ValueMoreData</ins><del>Value</del> ",
        diff.convertChangesToXML(diffResult),
        "Multiple whitespace diffResult Value");
};

// Diff on word boundary
exports['Word Diff'] = function() {
  diffResult = diff.diffWords("New :Value:Test", "New  ValueMoreData ");
  assert.equal(
    "New  <ins>ValueMoreData </ins><del>:Value:Test</del>",
    diff.convertChangesToXML(diffResult),
    "Nonmatching word boundary diffResult Value");
  diffResult = diff.diffWords("New Value:Test", "New  Value:MoreData ");
  assert.equal(
    "New  Value:<ins>MoreData </ins><del>Test</del>",
    diff.convertChangesToXML(diffResult),
    "Word boundary diffResult Value");
  diffResult = diff.diffWords("New Value-Test", "New  Value:MoreData ");
  assert.equal(
    "New  Value<ins>:MoreData </ins><del>-Test</del>",
    diff.convertChangesToXML(diffResult),
    "Uninque boundary diffResult Value");
  diffResult = diff.diffWords("New Value", "New  Value:MoreData ");
  assert.equal(
    "New  Value<ins>:MoreData </ins>",
    diff.convertChangesToXML(diffResult),
    "Word boundary diffResult Value");
};

// Diff without changes
exports['Diff without changes'] = function() {
  diffResult = diff.diffWords("New Value", "New Value");
  assert.equal(
    "New Value",
    diff.convertChangesToXML(diffResult),
    "No changes diffResult Value");
  diffResult = diff.diffWords("New Value", "New  Value");
  assert.equal(
    "New  Value",
    diff.convertChangesToXML(diffResult),
    "No changes whitespace diffResult Value");
  diffResult = diff.diffWords("", "");
  assert.equal(
    "",
    diff.convertChangesToXML(diffResult),
    "Empty no changes diffResult Value");
};

// Empty diffs
exports['Empty diffs'] = function() {
  diffResult = diff.diffWords("New Value", "");
  assert.equal(1, diffResult.length, "Empty diff result length");
  assert.equal(
    "<del>New Value</del>",
    diff.convertChangesToXML(diffResult),
    "Empty diffResult Value");
  diffResult = diff.diffWords("", "New Value");
  assert.equal(
    "<ins>New Value</ins>",
    diff.convertChangesToXML(diffResult),
    "Empty diffResult Value");
};

// With without anchor (the Heckel algorithm error case)
exports['No anchor'] = function() {
  diffResult = diff.diffWords("New Value New Value", "Value Value New New");
  assert.eql(
    "<ins>Value</ins><del>New</del> Value New <ins>New</ins><del>Value</del>",
    diff.convertChangesToXML(diffResult),
    "No anchor diffResult Value");
};

// CSS Diff
exports['CSS diffs'] = function() {
  diffResult = diff.diffCss(
    ".test,#value .test{margin-left:50px;margin-right:-40px}",
    ".test2, #value2 .test {\nmargin-top:50px;\nmargin-right:-400px;\n}");
  assert.equal(
    "<ins>.test2</ins><del>.test</del>,<del>#value</del> <ins>#value2 </ins>.test<ins> </ins>{<ins>\n"
    + "margin-top</ins><del>margin-left</del>:50px;<ins>\n</ins>"
    + "margin-right:<ins>-400px;\n</ins><del>-40px</del>}",
    diff.convertChangesToXML(diffResult),
    "CSS diffResult Value");
};

// Line Diff
exports['Line diffs'