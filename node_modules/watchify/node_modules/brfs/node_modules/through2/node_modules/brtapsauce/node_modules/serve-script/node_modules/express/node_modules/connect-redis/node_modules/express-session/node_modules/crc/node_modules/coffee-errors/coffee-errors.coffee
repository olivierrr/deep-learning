fs      = require 'fs'
path    = require 'path'
helpers = require 'coffee-script/lib/coffee-script/helpers'
coffee  = require 'coffee-script'

throw new Error '`coffee-errors` expects `coffee-script@~1.6.2`' if parseInt(coffee.VERSION.replace /\D+/g, '') < 162

compile    = coffee.compile
patched    = false
extensions = ['.coffee', '.litcoffee', '.coffee.md']

# Map of filenames -> sourceMap object.
sourceMaps = {}

patchStackTrace = ->
  return if patched
  patched = true

  oldPrepareStackTrack = Error.prepareStackTrace

  # (Assigning to a property of the Module object in the normal module cache is
  # unsuitable, because node deletes those objects from the cache if an
  # exception is thrown in the module body.)

  Error.prepareStackTrace = (err, stack) ->
    try
      sourceFiles = {}

      getSourceMapping = (filename, line, column) ->
        sourceMap = getSourceMap filename
        answer = sourceMap.sourceLocation [line - 1, column - 1] if sourceMap
        if answer then [answer[0] + 1, answer[1] + 1] else null

      frames = for frame in stack
        break if frame.getFunction() is coffee.run
        "  at #{formatSourcePosition frame, getSourceMapping}"

      "#{err.name}: #{err.message ? ''}\n#{frames.join '\n'}\n"
    catch e
      Error.prepareStackTrace = oldPrepareStackTrack
      "`coffee-errors` failed during stack parsing, falling back onto the previous parser. " + err.stack
      err.stack

# Based on http://v8.googlecode.com/svn/branches/bleeding_edge/src/messages.js
# Modified to handle sourceMap
formatSourcePosition = (frame, getSourceMapping) ->
  fileName = undefined
  fileLocation = ''

  if frame.isNative()
    fileLocation = "native"
  else
    if frame.isEval()
      fileName = frame.getScriptNameOrSourceURL()
      fileLocation = "#{frame.getEvalOrigin()}, " unless fileName
    else
      fileName = frame.getFileName()

    fileName or= "<anonymous>"

    line = frame.getLineNumber()
    column = frame.getColumnNumber()

    # Check for a sourceMap position
    source = getSou